{
  "name": "Validar Arquitectura Limpia",
  "description": "Valida que los archivos sigan las reglas de arquitectura limpia",
  "trigger": {
    "type": "manual",
    "buttonText": "üèóÔ∏è Validar Arquitectura"
  },
  "actions": [
    {
      "type": "agent_execution",
      "prompt": "Voy a realizar una auditor√≠a completa de la arquitectura del proyecto 'Ordenadores de Umbral'.\n\n**Validaciones que realizar√©:**\n\n1. **Regla de Dependencias**:\n   - Dominio no depende de capas externas\n   - Aplicaci√≥n solo depende de Dominio\n   - Infraestructura implementa interfaces de Dominio\n   - Presentaci√≥n usa casos de uso, no l√≥gica de dominio directa\n\n2. **Estructura de M√≥dulos**:\n   - Cada m√≥dulo (game, player, scenes, navigation) tiene capas correctas\n   - Separaci√≥n clara entre domain/, application/, infrastructure/, presentation/\n   - Interfaces en dominio, implementaciones en infraestructura\n\n3. **Convenciones de Naming**:\n   - Entidades: Player, Game, Scene\n   - Casos de Uso: StartGameUseCase, LoadSceneUseCase\n   - Repositorios: PlayerRepository, SceneRepository\n   - Value Objects: PlayerId, Energy, SceneContent\n\n4. **Principios SOLID**:\n   - Responsabilidad √∫nica por clase\n   - Abierto/cerrado para extensi√≥n\n   - Sustituci√≥n de Liskov\n   - Segregaci√≥n de interfaces\n   - Inversi√≥n de dependencias\n\n**Reporte incluir√°:**\n- Problemas encontrados con severidad\n- Sugerencias espec√≠ficas de refactorizaci√≥n\n- Ejemplos de c√≥digo corregido\n- M√©tricas de calidad arquitectural",
      "description": "Auditor√≠a completa de arquitectura limpia"
    }
  ],
  "enabled": true
}